// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: tasks.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, detail, assignee, deadline)
VALUES ($1, $2, $3, $4)
RETURNING id, detail, is_done, assignee, deadline, created_at, updated_at
`

type CreateTaskParams struct {
	ID       uuid.UUID `db:"id"`
	Detail   string    `db:"detail"`
	Assignee string    `db:"assignee"`
	Deadline time.Time `db:"deadline"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ID,
		arg.Detail,
		arg.Assignee,
		arg.Deadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Detail,
		&i.IsDone,
		&i.Assignee,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, detail, is_done, assignee, deadline, created_at, updated_at
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Detail,
		&i.IsDone,
		&i.Assignee,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, detail, is_done, assignee, deadline, created_at, updated_at
FROM tasks
order by created_at desc
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Detail,
			&i.IsDone,
			&i.Assignee,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTaskDone = `-- name: SetTaskDone :one
UPDATE tasks
SET is_done = true,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, detail, is_done, assignee, deadline, created_at, updated_at
`

func (q *Queries) SetTaskDone(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, setTaskDone, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Detail,
		&i.IsDone,
		&i.Assignee,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET detail = $1,
    assignee = $2,
    deadline = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, detail, is_done, assignee, deadline, created_at, updated_at
`

type UpdateTaskParams struct {
	Detail   string    `db:"detail"`
	Assignee string    `db:"assignee"`
	Deadline time.Time `db:"deadline"`
	ID       uuid.UUID `db:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Detail,
		arg.Assignee,
		arg.Deadline,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Detail,
		&i.IsDone,
		&i.Assignee,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
